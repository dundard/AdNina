@{
    ViewData["Title"] = "Reklam Setleri";
}

<!-- AdSets Page - Ad Sets & Budget (004-1) -->
<div class="min-h-screen bg-gray-50">
    
    <!-- Navigation Header -->
    <div class="bg-white border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <div class="flex items-center space-x-4">
                    <button class="flex items-center space-x-2 text-gray-600 hover:text-gray-900">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                        <span class="font-medium">Reklam Merkezi</span>
                    </button>
                </div>
                
                <div class="flex items-center space-x-4">
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 bg-gray-200 rounded-full"></div>
                        <button class="bg-gray-700 hover:bg-gray-800 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            <span>Yeni Proje</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        <!-- Page Header -->
        <div class="mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900" id="project-title">
                        Akıllı Lens Ameliyatı – Göz İçi Mercek
                    </h1>
                    <div class="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                        <span>Başlangıç Tarihi: <span class="font-medium" id="start-date-display">2025-09-04 - 21:27:49</span></span>
                        <span>•</span>
                        <span>Bitiş Tarihi: <span class="font-medium" id="end-date-display">2025-09-12 - 21:27:49</span></span>
                    </div>
                </div>
                <div class="text-right">
                    <div class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                        Trafik
                    </div>
                </div>
            </div>
        </div>
    
        <!-- Daily Budget Section -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center space-x-2">
                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <h2 class="text-lg font-semibold text-gray-900">Günlük Bütçe</h2>
                </div>
            </div>
            
            <div class="space-y-6">
                <!-- Budget Description -->
                <p class="text-sm text-gray-600">
                    İçin optimize edilmiş bütçe <span class="font-semibold text-gray-900">Healthcare</span>, Binlerce kampanyaya dayalı olarak <span class="font-semibold text-gray-900">TR</span>
                </p>
                
                <!-- Budget Input and Slider -->
                <div id="budget-slider-container"></div>
                
                <!-- Budget Message -->
                <div class="bg-blue-50 rounded-lg p-4 flex items-center space-x-3">
                    <div class="flex-shrink-0">
                        <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                    </div>
                    <p class="text-sm text-blue-800 font-medium">
                        Your budget works - more budget, better results!
                    </p>
                </div>
            </div>
        </div>
    
        <!-- Tabs Section -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden mb-8">
            <div class="border-b border-gray-200">
                <nav class="flex">
                    <button id="adsets-tab" class="tab-button active flex-1 px-6 py-4 text-sm font-medium border-b-2 border-transparent hover:border-gray-300 hover:text-gray-700">
                        <div class="flex items-center justify-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            <span>Reklam Setleri</span>
                        </div>
                    </button>
                    <button id="performance-tab" class="tab-button flex-1 px-6 py-4 text-sm font-medium border-b-2 border-transparent hover:border-gray-300 hover:text-gray-700">
                        <div class="flex items-center justify-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                            </svg>
                            <span>Performans Tahmini</span>
                        </div>
                    </button>
                </nav>
            </div>
            
            <!-- Tab Content -->
            <div class="p-6">
                <!-- AdSets Tab Content -->
                <div id="adsets-content" class="tab-content">
                    
                    <!-- Metrics Row -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <div class="text-center">
                            <div class="text-2xl font-bold text-gray-900" id="daily-reach">160K</div>
                            <div class="text-sm text-gray-500">günlük erişim</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-gray-900" id="weekly-budget">$483</div>
                            <div class="text-sm text-gray-500">haftalık bütçe</div>
                        </div>
                        <div class="text-center">
                            <div class="text-2xl font-bold text-gray-900" id="monthly-budget">$2070</div>
                            <div class="text-sm text-gray-500">aylık bütçe</div>
                            <div class="text-xs text-gray-400 mt-1">tahmini erişim</div>
                        </div>
                    </div>
                    
                    <!-- Assets Button -->
                    <div class="mb-6">
                        <button id="assets-button" class="flex items-center space-x-3 px-4 py-3 border border-gray-300 rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-all">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            <span class="text-gray-600 font-medium">Görseller ve videolar (<span id="assets-count">12</span>)</span>
                        </button>
                    </div>
                
                    <!-- Reklam Setleri Section -->
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900 mb-4">Reklam Setleri</h3>
                        
                        <!-- Add New AdSet Button -->
                        <div class="mb-6">
                            <button id="add-adset-btn" class="w-full py-12 border-2 border-dashed border-gray-300 rounded-lg text-gray-400 hover:border-gray-400 hover:text-gray-600 transition-all">
                                <div class="flex flex-col items-center space-y-2">
                                    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                    <span class="font-medium">Yeni Reklam Seti Ekle</span>
                                </div>
                            </button>
                        </div>
                        
                        <!-- AdSets List -->
                        <div id="adsets-list" class="space-y-4">
                            <!-- AdSet items will be populated by JS -->
                        </div>
                    </div>
                
                </div>
                
                <!-- Performance Tab Content -->
                <div id="performance-content" class="tab-content hidden">
                    <div class="space-y-8">
                        
                        <!-- Performance Metrics -->
                        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                            <div class="bg-gradient-to-r from-blue-50 to-blue-100 rounded-xl p-6 border border-blue-200">
                                <div class="text-blue-600 text-sm font-medium mb-2">Tahmini Erişim</div>
                                <div class="text-blue-900 text-2xl font-bold" id="metric-reach">
                                    <!-- Will be populated by JS -->
                                </div>
                            </div>
                            
                            <div class="bg-gradient-to-r from-green-50 to-green-100 rounded-xl p-6 border border-green-200">
                                <div class="text-green-600 text-sm font-medium mb-2">Gösterim</div>
                                <div class="text-green-900 text-2xl font-bold" id="metric-impressions">
                                    <!-- Will be populated by JS -->
                                </div>
                            </div>
                            
                            <div class="bg-gradient-to-r from-yellow-50 to-yellow-100 rounded-xl p-6 border border-yellow-200">
                                <div class="text-yellow-600 text-sm font-medium mb-2">Tıklanma</div>
                                <div class="text-yellow-900 text-2xl font-bold" id="metric-clicks">
                                    <!-- Will be populated by JS -->
                                </div>
                            </div>
                            
                            <div class="bg-gradient-to-r from-purple-50 to-purple-100 rounded-xl p-6 border border-purple-200">
                                <div class="text-purple-600 text-sm font-medium mb-2">Dönüşüm</div>
                                <div class="text-purple-900 text-2xl font-bold" id="metric-conversions">
                                    <!-- Will be populated by JS -->
                                </div>
                            </div>
                        </div>
                        
                        <!-- Performance Chart -->
                        <div class="bg-white rounded-xl border border-gray-200 p-6">
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Performans Tahmini</h3>
                            <div id="performance-chart-container"></div>
                        </div>
                        
                    </div>
                </div>
            </div>
        </div>
        
    </div>
    
    <!-- Hidden file input for assets -->
    <input type="file" id="file-input" multiple accept="image/*,video/*" style="display: none;">
    
</div>

@section Scripts {
<script type="text/babel">
    // Mount Budget Slider Component
    const budgetSliderRoot = ReactDOM.createRoot(document.getElementById('budget-slider-container'));
    
    function BudgetSliderWrapper() {
        const [budget, setBudget] = React.useState(30);
        
        React.useEffect(() => {
            const state = loadState();
            if (state.budget) {
                setBudget(state.budget);
            }
        }, []);
        
        const handleBudgetChange = (newBudget) => {
            setBudget(newBudget);
            // Update performance metrics when budget changes
            updatePerformanceMetrics(newBudget);
            updateBudgetMetrics(newBudget);
        };
        
        const updateBudgetMetrics = (budget) => {
            // Update the metrics display
            const dailyReachEl = document.getElementById('daily-reach');
            const weeklyBudgetEl = document.getElementById('weekly-budget');
            const monthlyBudgetEl = document.getElementById('monthly-budget');
            const conversionRateEl = document.getElementById('conversion-rate');
            
            if (dailyReachEl) {
                const reach = Math.round((budget / 30) * 160000);
                dailyReachEl.textContent = formatNumber(reach);
            }
            
            if (weeklyBudgetEl) {
                weeklyBudgetEl.textContent = `$${budget * 7}`;
            }
            
            if (monthlyBudgetEl) {
                monthlyBudgetEl.textContent = `$${budget * 30}`;
            }
            
            if (conversionRateEl) {
                // Calculate conversion rate based on budget (higher budget = better optimization)
                const baseRate = 2.4;
                const budgetMultiplier = Math.min(budget / 50, 2); // Cap at 2x improvement
                const rate = (baseRate * budgetMultiplier).toFixed(1);
                conversionRateEl.textContent = `${rate}%`;
            }
        };
        
        return (
            <BudgetSlider 
                value={budget}
                onChange={handleBudgetChange}
                showCurrency={true}
            />
        );
    }
    
    budgetSliderRoot.render(<BudgetSliderWrapper />);
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const state = loadState();
        
        // Initialize page
        initHeader();
        initTabs();
        initAdSetsList();
        initAssets();
        updatePerformanceMetrics(state.budget || 30);
        
        function initHeader() {
            // Set project title
            const titleEl = document.getElementById('project-title');
            const goalDisplayEl = document.getElementById('goal-display');
            const state = loadState();
            
            if (titleEl && state.projectName) {
                titleEl.textContent = state.projectName;
            } else if (titleEl) {
                titleEl.textContent = 'Akıllı Lens Ameliyatı – Göz İçi Mercek';
            }
            
            // Set goal display
            if (goalDisplayEl && state.goal) {
                const goalInfo = getGoalInfo(state.goal);
                goalDisplayEl.textContent = goalInfo.label;
            }
            
            // Set dates if available
            const startDateEl = document.getElementById('start-date-display');
            const endDateEl = document.getElementById('end-date-display');
            
            if (startDateEl && state.startAt) {
                const date = new Date(state.startAt);
                startDateEl.textContent = date.toLocaleDateString('tr-TR');
            }
            
            if (endDateEl && state.endAt) {
                const date = new Date(state.endAt);
                endDateEl.textContent = date.toLocaleDateString('tr-TR');
            }
            
            // Initialize budget metrics
            updateBudgetMetrics(state.budget || 30);
        }
        
        function getGoalInfo(goal) {
            const goals = {
                'Traffic': { icon: '🌐', label: 'Web Sitesi Trafiği' },
                'Leads': { icon: '📧', label: 'Potansiyel Müşteri' },
                'Sales': { icon: '💰', label: 'Satış' }
            };
            return goals[goal] || goals['Traffic'];
        }
        
        function initTabs() {
            const adsetsTab = document.getElementById('adsets-tab');
            const performanceTab = document.getElementById('performance-tab');
            const adsetsContent = document.getElementById('adsets-content');
            const performanceContent = document.getElementById('performance-content');
            
            adsetsTab.addEventListener('click', function() {
                setActiveTab('adsets');
            });
            
            performanceTab.addEventListener('click', function() {
                setActiveTab('performance');
            });
            
            function setActiveTab(tab) {
                // Remove active from all tabs
                document.querySelectorAll('.tab-button').forEach(btn => {
                    btn.classList.remove('active');
                });
                
                // Hide all content
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.add('hidden');
                });
                
                if (tab === 'adsets') {
                    adsetsTab.classList.add('active');
                    adsetsContent.classList.remove('hidden');
                } else if (tab === 'performance') {
                    performanceTab.classList.add('active');
                    performanceContent.classList.remove('hidden');
                    
                    // Render performance chart when tab is shown
                    setTimeout(() => {
                        renderPerformanceChart();
                    }, 100);
                }
            }
        }
        
        function initAdSetsList() {
            const adsetsList = document.getElementById('adsets-list');
            
            // Load adsets from data
            const adsets = window.AppData ? window.AppData.adsets : [];
            
            // Render adsets list in grid format
            adsetsList.innerHTML = '';
            adsets.forEach((adset, index) => {
                const adsetItem = document.createElement('div');
                adsetItem.className = `adset-item bg-white rounded-xl border border-gray-200 p-6 cursor-pointer hover:border-blue-500 hover:shadow-lg transition-all ${index === 0 ? 'selected' : ''}`;
                adsetItem.dataset.adsetId = adset.id;
                
                adsetItem.innerHTML = `
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <h4 class="font-semibold text-gray-900 text-lg">${adset.title}</h4>
                            <p class="text-sm text-gray-500 mt-1">${adset.age} • ${adset.gender}</p>
                        </div>
                        <div class="text-right">
                            <div class="text-2xl font-bold text-blue-600">$${adset.spend}</div>
                            <div class="text-xs text-gray-500">günlük</div>
                        </div>
                    </div>
                    
                    <div class="space-y-3">
                        <div class="flex items-center text-sm text-gray-600">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                            </svg>
                            <span>${adset.locations.join(', ')}</span>
                        </div>
                        
                        <div class="bg-gray-50 rounded-lg p-3">
                            <p class="text-sm font-medium text-gray-900">${adset.headline}</p>
                            <p class="text-xs text-gray-600 mt-1 line-clamp-2">${adset.body}</p>
                        </div>
                        
                        <div class="flex items-center justify-between pt-2">
                            <div class="flex space-x-1">
                                ${adset.tags.slice(0, 2).map(tag => `<span class="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">${tag}</span>`).join('')}
                            </div>
                            <div class="text-xs text-gray-500">
                                ${adset.estimatedReach}
                            </div>
                        </div>
                    </div>
                `;
                
                adsetItem.addEventListener('click', function() {
                    selectAdSet(adset, this);
                });
                
                adsetsList.appendChild(adsetItem);
            });
            
            // Show first adset by default
            if (adsets.length > 0) {
                selectAdSet(adsets[0], adsetsList.firstChild);
            }
            
            // Add new adset functionality
            const addBtn = document.getElementById('add-adset-btn');
            addBtn.addEventListener('click', function() {
                showToast('Yeni reklam seti ekleme özelliği yakında!', 'info');
            });
        }
        
        function selectAdSet(adset, element) {
            // Remove selected from all items
            document.querySelectorAll('.adset-item').forEach(item => {
                item.classList.remove('selected');
            });
            
            // Add selected to clicked item
            element.classList.add('selected');
            
            // Update any relevant metrics or UI based on selected adset
            if (window.showToast) {
                showToast(`${adset.title} seçildi`, 'info', 1500);
            }
        }
        
        function initAssets() {
            const assetsButton = document.getElementById('assets-button');
            const fileInput = document.getElementById('file-input');
            const assetsCount = document.getElementById('assets-count');
            
            assetsButton.addEventListener('click', function() {
                fileInput.click();
            });
            
            fileInput.addEventListener('change', function(e) {
                const files = e.target.files;
                if (files.length > 0) {
                    const currentCount = parseInt(assetsCount.textContent);
                    const newCount = currentCount + files.length;
                    assetsCount.textContent = newCount;
                    
                    saveState({ assetsCount: newCount });
                    showToast(`${files.length} dosya yüklendi!`, 'success');
                }
            });
            
            // Load saved assets count
            if (state.assetsCount) {
                assetsCount.textContent = state.assetsCount;
            }
        }
        
        function renderPerformanceChart() {
            const container = document.getElementById('performance-chart-container');
            if (!container) return;
            
            const budget = state.budget || 30;
            const metrics = window.AppData ? 
                window.AppData.generatePerformanceMetrics(budget) : 
                {
                    reach: { min: 976900, max: 1465400 },
                    impressions: { min: 175000, max: 262500 },
                    clicks: { min: 5250, max: 7875 },
                    conversions: { min: 210, max: 392 }
                };
            
            if (window.ChartHelpers && window.ChartHelpers.renderPerformanceChart) {
                window.ChartHelpers.renderPerformanceChart('performance-chart-container', metrics);
            }
        }
        
        // Global function to update performance metrics
        window.updatePerformanceMetrics = function(budget) {
            const metrics = window.AppData ? 
                window.AppData.generatePerformanceMetrics(budget) : 
                {
                    reach: { min: 976900, max: 1465400 },
                    impressions: { min: 175000, max: 262500 },
                    clicks: { min: 5250, max: 7875 },
                    conversions: { min: 210, max: 392 }
                };
            
            // Update metric displays
            const reachEl = document.getElementById('metric-reach');
            const impressionsEl = document.getElementById('metric-impressions');
            const clicksEl = document.getElementById('metric-clicks');
            const conversionsEl = document.getElementById('metric-conversions');
            
            if (reachEl) reachEl.textContent = `${formatNumber(metrics.reach.min)} - ${formatNumber(metrics.reach.max)}`;
            if (impressionsEl) impressionsEl.textContent = `${formatNumber(metrics.impressions.min)} - ${formatNumber(metrics.impressions.max)}`;
            if (clicksEl) clicksEl.textContent = `${formatNumber(metrics.clicks.min)} - ${formatNumber(metrics.clicks.max)}`;
            if (conversionsEl) conversionsEl.textContent = `${formatNumber(metrics.conversions.min)} - ${formatNumber(metrics.conversions.max)}`;
        };
    });
</script>

<style>
    .tab-button {
        border-bottom-color: transparent;
        color: #6B7280;
        transition: all 0.2s ease;
    }
    
    .tab-button.active {
        border-bottom-color: #7B61FF;
        color: #7B61FF;
        background-color: rgba(123, 97, 255, 0.05);
    }
    
    .tab-button:hover {
        color: #7B61FF;
        background-color: rgba(123, 97, 255, 0.05);
    }
    
    .adset-item {
        transition: all 0.2s ease;
        will-change: transform, box-shadow;
    }
    
    .adset-item.selected {
        border-color: #7B61FF;
        background-color: rgba(123, 97, 255, 0.1);
        box-shadow: 0 0 0 3px rgba(123, 97, 255, 0.1);
        transform: translateY(-2px);
    }
    
    .adset-item:hover {
        border-color: #7B61FF;
        background-color: rgba(123, 97, 255, 0.05);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    /* Smooth animations for metrics */
    .metric-animation {
        animation: fadeInUp 0.6s ease-out;
    }
    
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
}